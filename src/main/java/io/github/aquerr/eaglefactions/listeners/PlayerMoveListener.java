package io.github.aquerr.eaglefactions.listeners;import com.flowpowered.math.vector.Vector3i;import com.google.inject.Inject;import com.google.inject.Singleton;import io.github.aquerr.eaglefactions.EagleFactions;import io.github.aquerr.eaglefactions.PluginInfo;import io.github.aquerr.eaglefactions.caching.FactionsCache;import io.github.aquerr.eaglefactions.config.Settings;import io.github.aquerr.eaglefactions.entities.Faction;import io.github.aquerr.eaglefactions.logic.FactionLogic;import io.github.aquerr.eaglefactions.logic.PluginMessages;import io.github.aquerr.eaglefactions.managers.PlayerManager;import io.github.aquerr.eaglefactions.wrapper.Wilderness;import org.spongepowered.api.Sponge;import org.spongepowered.api.entity.Transform;import org.spongepowered.api.entity.living.player.Player;import org.spongepowered.api.event.Listener;import org.spongepowered.api.event.entity.MoveEntityEvent;import org.spongepowered.api.event.filter.cause.Root;import org.spongepowered.api.text.Text;import org.spongepowered.api.text.chat.ChatTypes;import org.spongepowered.api.text.format.TextColors;import org.spongepowered.api.text.title.Title;import org.spongepowered.api.world.Location;import org.spongepowered.api.world.World;import java.util.Optional;@Singletonpublic class PlayerMoveListener extends GenericListener {    private PlayerManager playerManager;    private FactionLogic factionLogic;    @Inject    PlayerMoveListener(FactionsCache cache, Settings settings, EagleFactions eagleFactions, PlayerManager playerManager, FactionLogic factionLogic) {        super(cache, settings, eagleFactions);        this.playerManager = playerManager;        this.factionLogic = factionLogic;    }    @Listener    public void onPlayerMove(MoveEntityEvent event, @Root Player player) {        Location lastLocation = event.getFromTransform().getLocation();        Location newLocation = event.getToTransform().getLocation();        if (!lastLocation.getChunkPosition().equals(newLocation.getChunkPosition())) {            World world = player.getWorld();            Vector3i oldChunk = lastLocation.getChunkPosition();            Vector3i newChunk = newLocation.getChunkPosition();            Optional<Faction> optionalPlayerFaction = cache.getFactionByPlayer(player.getUniqueId());            Optional<Faction> optionalChunkFaction = cache.getFactionByChunk(world.getUniqueId(), newChunk);            Faction playerFaction = optionalPlayerFaction.orElse(Wilderness.get());            Faction chunkFaction = optionalChunkFaction.orElse(Wilderness.get());            //Inform a player about entering faction's land.            if (!chunkFaction.equals(playerFaction)) {                Title chunkTitle = Title.builder().actionBar(Text.of(FactionLogic.getRelationColor(chunkFaction.fid, playerFaction.fid)))                .subtitle(Text.of(TextColors.YELLOW, chunkFaction.description))                .build();                player.sendTitle(chunkTitle);            }            //Check if player has tuned on AutoClaim            if (EagleFactions.AutoClaimList.contains(player.getUniqueId())) {                Sponge.getCommandManager().process(player, "f claim");            }            //Check if player has turned on AutoMap            if (EagleFactions.AutoMapList.contains(player.getUniqueId())) {                Sponge.getCommandManager().process(player, "f map");            }        }    }}